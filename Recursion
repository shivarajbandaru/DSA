206. Reverse Linked List
https://leetcode.com/problems/reverse-linked-list/

1.Understand the the linked List.
2.understand requirements
3.Go with the requirements , Linked List  flow
4.Get logic
5.get the basecase
6.try different approches by pen , paper

//1
class Solution:
    def helper( self , n , p , c):
        if n is None:
            c.next = p
            return c
        c.next = p
        p = c
        c = n
        n = n.next
        return (self.helper( n , p , c ))
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if head is None:
            return None
        if head.next is None:
            return head
        n = head.next
        c = head
        p = None
        return self.helper( n , p , c)

//2nd 
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
from typing import Optional
class Solution:
    def helper( self , n , p , c):
            c.next = p
            p = c
            c = n
            if n is None:
                return p
            else:
                n = n.next
                return (self.helper( n , p , c ))
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if head is None:
            return None
        if head.next is None:
            return head
        n = head.next
        c = head
        p = None
        return self.helper( n , p , c)



        












        
